{
  "openapi": "3.0.0",
  "info": {
    "version": "0.0.1",
    "title": "Order Process Service",
    "description": "Clarityo Order Process service that manages the order process for the client"
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "name": "Authorization",
        "in": "header",
        "type": "apiKey",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "OrderItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of order item"
          },
          "productId": {
            "type": "string",
            "description": "product id"
          },
          "name": {
            "type": "string",
            "description": "Name of item"
          },
          "sku": {
            "type": "string",
            "description": "Sku of item"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of item"
          }
        },
        "required": ["id", "name", "quantity"],
        "description": "Schema of item within order"
      },
      "PatchOrderItemRequest": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "new quantity numeric value",
            "example": 5
          }
        },
        "required": ["quantity"],
        "description": "Request Schema for creating item in order"
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of order"
          },
          "customerId": {
            "type": "string",
            "description": "Id of customer"
          },
          "supplierId": {
            "type": "string",
            "description": "Supplier id"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            },
            "description": "Array of items"
          },
          "finalized": {
            "type": "boolean",
            "description": "Is the order finalized or not"
          },
          "openedAt": {
            "type": "string",
            "description": "Date the order was openedAt"
          },
          "finalizedAt": {
            "type": "string",
            "description": "Returned only if order is finalized, date the order was finalized"
          }
        },
        "required": [
          "id",
          "customerId",
          "supplierId",
          "items",
          "finalized",
          "openedAt"
        ],
        "description": "Schema of order"
      },
      "PostOrderRequest": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "Id of customer",
            "example": "restaurantId123"
          },
          "supplierId": {
            "type": "string",
            "description": "Id of supplier",
            "example": "supplierId123"
          }
        },
        "required": ["customerId", "supplierId"],
        "description": "Request Schema for creating orders"
      },
      "Purchase list item schema": {
        "type": "object",
        "properties": {
          "businessId": {
            "type": "string",
            "description": "Business Id",
            "example": "businessId"
          },
          "supplierId": {
            "type": "string",
            "description": "Supplier id",
            "example": "supplierId"
          },
          "productId": {
            "type": "string",
            "description": "Product Id",
            "example": "productId"
          },
          "isRecommended": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ],
            "description": "Is purchase list item recommended or not",
            "example": true
          }
        },
        "required": ["businessId", "supplierId", "productId", "isRecommended"],
        "description": "Purchase list item schema"
      },
      "Amount of records that match the query": {
        "type": "number"
      },
      "Actual records": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "businessId": {
              "type": "string",
              "description": "Business id of order term",
              "example": "bid"
            },
            "supplierId": {
              "type": "string",
              "description": "Supplier id of order term - who the business has a agreement with",
              "example": "bid"
            },
            "schedules": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "deliveryArrivalTime": {
                    "type": "object",
                    "properties": {
                      "dayOfWeek": {
                        "type": "string",
                        "enum": [
                          "sunday",
                          "monday",
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday"
                        ]
                      },
                      "timeOfDay": {
                        "type": "string",
                        "description": "Time of day for delivery arrival",
                        "example": "14:00"
                      }
                    },
                    "required": ["dayOfWeek", "timeOfDay"],
                    "additionalProperties": false
                  },
                  "orderCutOffTime": {
                    "type": "object",
                    "properties": {
                      "dayOfWeek": {
                        "type": "string",
                        "enum": [
                          "sunday",
                          "monday",
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday"
                        ]
                      },
                      "timeOfDay": {
                        "type": "string",
                        "description": "Time of day for order cut off",
                        "example": "14:00"
                      }
                    },
                    "required": ["dayOfWeek", "timeOfDay"],
                    "additionalProperties": false
                  }
                },
                "required": ["deliveryArrivalTime", "orderCutOffTime"],
                "additionalProperties": false
              }
            },
            "contactInfo": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "enum": ["email", "whatsApp"]
                  },
                  "address": {
                    "type": "string",
                    "description": "Contact info address",
                    "example": "email@email.com"
                  }
                },
                "required": ["method", "address"],
                "additionalProperties": false
              }
            }
          },
          "required": ["businessId", "supplierId", "schedules", "contactInfo"],
          "additionalProperties": false
        }
      }
    },
    "parameters": {}
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Route",
        "description": "Check that the service is up and running",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All orders that match filter"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/order-processes/:orderId/items/": {
      "post": {
        "summary": "Create Item in Order",
        "description": "Create Item in Order",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "1212121"
            },
            "required": true,
            "name": "orderId",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "Create Item in Order body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "string",
                    "description": "product id"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of item"
                  },
                  "sku": {
                    "type": "string",
                    "description": "Sku of item"
                  },
                  "quantity": {
                    "type": "number",
                    "description": "Quantity of item"
                  }
                },
                "required": ["name", "quantity"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create Item in Order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/order-processes/:orderId/items/:itemId": {
      "patch": {
        "summary": "Patch update Item in Order",
        "description": "Patch update Item in Order",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "1212121"
            },
            "required": true,
            "name": "orderId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "example": "1212121"
            },
            "required": true,
            "name": "itemId",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "Patch update Item in Order body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchOrderItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Patch update Item in Order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchOrderItemRequest"
                }
              }
            }
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      },
      "delete": {
        "summary": "Delete Item in Order",
        "description": "Delete Item in Order",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "1212121"
            },
            "required": true,
            "name": "orderId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "example": "1212121"
            },
            "required": true,
            "name": "itemId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Patch update Item in Order"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/order-processes/": {
      "get": {
        "summary": "Get Orders",
        "description": "Get all order that match the filter",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Customer id to filter by",
              "example": "exampleCustomerId"
            },
            "required": false,
            "name": "customerId",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                }
              ],
              "description": "A flag to return only finalized orders or non-finalized orders, if not provided, returns all orders"
            },
            "required": false,
            "name": "finalized",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 100
                },
                {
                  "type": "string"
                }
              ],
              "default": 25,
              "description": "Limit the number of orders returned"
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ],
              "default": 0,
              "description": "The amount of documents to offset(skip) before retrieving limit amount of documents"
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All orders that match filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "count": {
                      "type": "number"
                    }
                  },
                  "required": ["data", "count"]
                }
              }
            }
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      },
      "post": {
        "summary": "Create Orders",
        "description": "Create new order",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Create new order body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create new order",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "customerId": {
                      "type": "string"
                    },
                    "supplierId": {
                      "type": "string"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrderItem"
                      }
                    },
                    "openedAt": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "customerId",
                    "supplierId",
                    "items",
                    "openedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/order-processes/:orderId": {
      "get": {
        "summary": "Get Order by Id",
        "description": "Get Order by Id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "1212121"
            },
            "required": true,
            "name": "orderId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get Order by Id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/purchase-list-items/": {
      "get": {
        "summary": "Get purchase list items",
        "description": "Get all purchase list items that match the filter",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Business Id",
              "example": "businessId"
            },
            "required": true,
            "name": "businessId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Supplier id",
              "example": "supplierId"
            },
            "required": false,
            "name": "supplierId",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "minimum": 0,
                  "maximum": 100
                },
                {
                  "type": "string"
                }
              ],
              "default": 25,
              "description": "Limit purchase list items returned",
              "example": 25
            },
            "required": true,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "minimum": 0
                },
                {
                  "type": "string"
                }
              ],
              "default": 0,
              "description": "Page to retrieve",
              "example": 1
            },
            "required": true,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Purchase list items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Purchase list item schema"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      },
      "post": {
        "summary": "Create purchase list item",
        "description": "Create purchase list item from body passed",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Create new purchase list item body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Purchase list item schema"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Indicates successful creation of purchase list item"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/purchase-list-items/:businessId/:productId": {
      "delete": {
        "summary": "Delete purchase list item",
        "description": "Delete purchase list item that matches business and product id passed",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Business Id",
              "example": "businessId"
            },
            "required": true,
            "name": "businessId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Product Id",
              "example": "productId"
            },
            "required": true,
            "name": "productId",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Indicates successful deletion of purchase list item"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/purchase-list-items/:businessId/:supplierId": {
      "put": {
        "summary": "Updates purchase list item",
        "description": "Updates purchase list item from body passed",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Business Id",
              "example": "businessId"
            },
            "required": true,
            "name": "businessId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Supplier id",
              "example": "supplierId"
            },
            "required": true,
            "name": "supplierId",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "Updates purchase list item body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isRecommended": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "description": "Is purchase list item recommended or not",
                    "example": true
                  },
                  "productId": {
                    "type": "string",
                    "description": "Product Id",
                    "example": "productId"
                  }
                },
                "required": ["isRecommended", "productId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates successful update of purchase list item"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/order-terms/": {
      "get": {
        "summary": "Get order terms",
        "description": "Get order terms that match the filter",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Business Id that the order term is relevant to"
            },
            "required": true,
            "name": "businessId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string",
              "description": "Supplier id of the order terms"
            },
            "required": false,
            "name": "supplierId",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "number",
                  "maximum": 100
                },
                {
                  "type": "string"
                }
              ],
              "default": 25,
              "description": "Limit the number of orders returned"
            },
            "required": false,
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ],
              "default": 0,
              "description": "The amount of documents to offset(skip) before retrieving limit amount of documents"
            },
            "required": false,
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All order terms that match filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "$ref": "#/components/schemas/Amount of records that match the query"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Actual records"
                    }
                  },
                  "required": ["count", "data"]
                }
              }
            }
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      },
      "post": {
        "summary": "Create order terms",
        "description": "Create order terms",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Create new order term body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "businessId": {
                    "type": "string",
                    "description": "Business id of order term",
                    "example": "bid"
                  },
                  "supplierId": {
                    "type": "string",
                    "description": "Supplier id of order term - who the business has a agreement with",
                    "example": "bid"
                  },
                  "schedules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deliveryArrivalTime": {
                          "type": "object",
                          "properties": {
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "sunday",
                                "monday",
                                "tuesday",
                                "wednesday",
                                "thursday",
                                "friday",
                                "saturday"
                              ]
                            },
                            "timeOfDay": {
                              "type": "string",
                              "description": "Time of day for delivery arrival",
                              "example": "14:00"
                            }
                          },
                          "required": ["dayOfWeek", "timeOfDay"],
                          "additionalProperties": false
                        },
                        "orderCutOffTime": {
                          "type": "object",
                          "properties": {
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "sunday",
                                "monday",
                                "tuesday",
                                "wednesday",
                                "thursday",
                                "friday",
                                "saturday"
                              ]
                            },
                            "timeOfDay": {
                              "type": "string",
                              "description": "Time of day for order cut off",
                              "example": "14:00"
                            }
                          },
                          "required": ["dayOfWeek", "timeOfDay"],
                          "additionalProperties": false
                        }
                      },
                      "required": ["deliveryArrivalTime", "orderCutOffTime"],
                      "additionalProperties": false
                    }
                  },
                  "contactInfo": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": ["email", "whatsApp"]
                        },
                        "address": {
                          "type": "string",
                          "description": "Contact info address",
                          "example": "email@email.com"
                        }
                      },
                      "required": ["method", "address"],
                      "additionalProperties": false
                    }
                  }
                },
                "required": [
                  "businessId",
                  "supplierId",
                  "schedules",
                  "contactInfo"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Indicates successful creation of order term"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/order-terms/:orderTermId": {
      "patch": {
        "summary": "Update order terms",
        "description": "Update order terms",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Update order term body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "businessId": {
                    "type": "string",
                    "description": "Business id of order term",
                    "example": "bid"
                  },
                  "supplierId": {
                    "type": "string",
                    "description": "Supplier id of order term - who the business has a agreement with",
                    "example": "bid"
                  },
                  "schedules": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "deliveryArrivalTime": {
                          "type": "object",
                          "properties": {
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "sunday",
                                "monday",
                                "tuesday",
                                "wednesday",
                                "thursday",
                                "friday",
                                "saturday"
                              ]
                            },
                            "timeOfDay": {
                              "type": "string",
                              "description": "Time of day for delivery arrival",
                              "example": "14:00"
                            }
                          },
                          "required": ["dayOfWeek", "timeOfDay"],
                          "additionalProperties": false
                        },
                        "orderCutOffTime": {
                          "type": "object",
                          "properties": {
                            "dayOfWeek": {
                              "type": "string",
                              "enum": [
                                "sunday",
                                "monday",
                                "tuesday",
                                "wednesday",
                                "thursday",
                                "friday",
                                "saturday"
                              ]
                            },
                            "timeOfDay": {
                              "type": "string",
                              "description": "Time of day for order cut off",
                              "example": "14:00"
                            }
                          },
                          "required": ["dayOfWeek", "timeOfDay"],
                          "additionalProperties": false
                        },
                        "id": {
                          "type": "string",
                          "nullable": true
                        }
                      },
                      "required": ["deliveryArrivalTime", "orderCutOffTime"],
                      "additionalProperties": false
                    }
                  },
                  "contactInfo": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "enum": ["email", "whatsApp"]
                        },
                        "address": {
                          "type": "string",
                          "description": "Contact info address",
                          "example": "email@email.com"
                        },
                        "id": {
                          "type": "string",
                          "nullable": true
                        }
                      },
                      "required": ["method", "address"],
                      "additionalProperties": false
                    }
                  }
                },
                "required": [
                  "businessId",
                  "supplierId",
                  "schedules",
                  "contactInfo"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates successful patch of order term"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/order-terms/:termId/contact-info/": {
      "post": {
        "summary": "Create order term contact info",
        "description": "Create order term contact info",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Order term id to create contact info for",
              "example": "1212121"
            },
            "required": true,
            "name": "termId",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "Create new order term contact info body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "enum": ["email", "whatsApp"]
                  },
                  "address": {
                    "type": "string",
                    "description": "Contact info address",
                    "example": "email@email.com"
                  }
                },
                "required": ["method", "address"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Indicates successful creation of a order term contact info"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/order-terms/:termId/contact-info/:contactInfoId": {
      "put": {
        "summary": "Update order term contact info",
        "description": "Update order term contact info",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Order term id to update contact info for",
              "example": "1212121"
            },
            "required": true,
            "name": "termId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Contact info id to update",
              "example": "1212121"
            },
            "required": true,
            "name": "contactInfoId",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "Update order term contact info body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Contact info address",
                    "example": "email@email.com"
                  }
                },
                "required": ["address"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates successful update "
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      },
      "delete": {
        "summary": "Delete order term contact info",
        "description": "Delete order term contact info",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Order term id to delete contact info for",
              "example": "1212121"
            },
            "required": true,
            "name": "termId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Contact info id to delete",
              "example": "1212121"
            },
            "required": true,
            "name": "contactInfoId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates successful delete"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/order-terms/:termId/schedule/": {
      "post": {
        "summary": "Create order term schedule",
        "description": "Create order term schedule",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Order term id to create schedule for",
              "example": "1212121"
            },
            "required": true,
            "name": "termId",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "Create new order term schedule body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deliveryArrivalTime": {
                    "type": "object",
                    "properties": {
                      "dayOfWeek": {
                        "type": "string",
                        "enum": [
                          "sunday",
                          "monday",
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday"
                        ]
                      },
                      "timeOfDay": {
                        "type": "string",
                        "description": "Time of day for delivery arrival",
                        "example": "14:00"
                      }
                    },
                    "required": ["dayOfWeek", "timeOfDay"],
                    "additionalProperties": false
                  },
                  "orderCutOffTime": {
                    "type": "object",
                    "properties": {
                      "dayOfWeek": {
                        "type": "string",
                        "enum": [
                          "sunday",
                          "monday",
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday"
                        ]
                      },
                      "timeOfDay": {
                        "type": "string",
                        "description": "Time of day for order cut off",
                        "example": "14:00"
                      }
                    },
                    "required": ["dayOfWeek", "timeOfDay"],
                    "additionalProperties": false
                  }
                },
                "required": ["deliveryArrivalTime", "orderCutOffTime"],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Indicates successful creation of a order term schedule"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/order-terms/:termId/schedule/:scheduleId": {
      "put": {
        "summary": "Update order term schedule",
        "description": "Update order term schedule",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Order term id to update schedule for",
              "example": "1212121"
            },
            "required": true,
            "name": "termId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Schedule id to update",
              "example": "1212121"
            },
            "required": true,
            "name": "scheduleId",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "Update order term schedule body request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "deliveryArrivalTime": {
                    "type": "object",
                    "properties": {
                      "dayOfWeek": {
                        "type": "string",
                        "enum": [
                          "sunday",
                          "monday",
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday"
                        ]
                      },
                      "timeOfDay": {
                        "type": "string",
                        "description": "Time of day for delivery arrival",
                        "example": "14:00"
                      }
                    },
                    "required": ["dayOfWeek", "timeOfDay"],
                    "additionalProperties": false
                  },
                  "orderCutOffTime": {
                    "type": "object",
                    "properties": {
                      "dayOfWeek": {
                        "type": "string",
                        "enum": [
                          "sunday",
                          "monday",
                          "tuesday",
                          "wednesday",
                          "thursday",
                          "friday",
                          "saturday"
                        ]
                      },
                      "timeOfDay": {
                        "type": "string",
                        "description": "Time of day for order cut off",
                        "example": "14:00"
                      }
                    },
                    "required": ["dayOfWeek", "timeOfDay"],
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Indicates successful update "
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      },
      "delete": {
        "summary": "Delete order term schedule",
        "description": "Delete order term schedule",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "description": "Order term id to delete schedule for",
              "example": "1212121"
            },
            "required": true,
            "name": "termId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "Schedule id to delete",
              "example": "1212121"
            },
            "required": true,
            "name": "scheduleId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Indicates successful delete"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    },
    "/docs/json": {
      "get": {
        "summary": "Get Docs",
        "description": "Get the json representation of our open api docs",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "JSON that holds the openapi specification"
          },
          "400": {
            "description": "Request validator error description"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected exception"
          }
        }
      }
    }
  }
}
